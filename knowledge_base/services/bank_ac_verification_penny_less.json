{
  "category": "BANKING AND PAYMENTS",
  "service_name": "Bank AC Verification (Penny Less)",
  "description": "This service verifies the existence and validity of a bank account without performing a penny drop transaction. It provides details such as account status, full name, bank name, branch, and other related information.",
  "llm_summary": "Bank AC Verification (Penny Less) validates a bank account's existence and status using IFSC and account number, aiding in payment processing and fraud prevention.",
  "tags": [
    "bank account verification",
    "penny less verification",
    "banking",
    "payments",
    "fraud prevention",
    "account validation"
  ],
  "use_cases": [
    "Verify the existence and validity of a bank account for payment processing.",
    "Ensure accurate account details during onboarding or KYC processes.",
    "Prevent fraud by validating bank account information without a penny drop.",
    "Support seamless integration with payment gateways and banking systems."
  ],
  "request_schema": [
    {
      "field": "bankAccountNumber",
      "type": "string",
      "description": "Bank account number to verify.",
      "validations": {
        "pattern": "^\\d{9,18}$"
      },
      "required": true
    },
    {
      "field": "ifscNumber",
      "type": "string",
      "description": "IFSC code of the bank branch.",
      "validations": {
        "pattern": "^[A-Z]{4}0[A-Z0-9]{6}$"
      },
      "required": true
    },
    {
      "field": "name",
      "type": "string",
      "description": "Name of the account holder.",
      "validations": {
        "minLength": 1
      },
      "required": true
    },
    {
      "field": "address",
      "type": "string",
      "description": "Address of the account holder.",
      "validations": {
        "minLength": 1
      },
      "required": true
    },
    {
      "field": "consent",
      "type": "boolean",
      "description": "User consent for verifying the bank account.",
      "validations": {
        "allowedValues": [true, false]
      },
      "required": true
    }
  ],
  "response_schema": [
    {
      "field": "status",
      "type": "string",
      "description": "Overall status of the API response.",
      "validations": {
        "allowedValues": ["success", "error", "failed"]
      },
      "required": true
    },
    {
      "field": "requestId",
      "type": "string",
      "description": "Unique request ID generated by the API.",
      "validations": {
        "pattern": "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[1-5][0-9a-fA-F]{3}-[89abAB][0-9a-fA-F]{3}-[0-9a-fA-F]{12}$"
      },
      "required": true
    },
    {
      "field": "type",
      "type": "string",
      "description": "Type of verification performed.",
      "validations": {
        "allowedValues": ["point"]
      },
      "required": true
    },
    {
      "field": "serviceStatusCode",
      "type": "integer",
      "description": "HTTP status code for the service.",
      "validations": {
        "minimum": 100,
        "maximum": 599
      },
      "required": true
    },
    {
      "field": "data",
      "type": "object",
      "description": "Details of the bank account verification.",
      "properties": {
        "accountExists": {
          "type": "boolean",
          "description": "Indicates if the account exists."
        },
        "accountStatus": {
          "type": "string",
          "description": "Status of the account."
        },
        "accountStatusCode": {
          "type": "string",
          "description": "Code representing the account status."
        },
        "fullName": {
          "type": "string",
          "description": "Full name of the account holder."
        },
        "bankName": {
          "type": "string",
          "description": "Name of the bank."
        },
        "branch": {
          "type": "string",
          "description": "Branch of the bank."
        },
        "city": {
          "type": "string",
          "description": "City where the bank branch is located."
        },
        "state": {
          "type": "string",
          "description": "State where the bank branch is located."
        },
        "micr": {
          "type": "string",
          "description": "MICR code of the bank branch."
        },
        "refId": {
          "type": "string",
          "description": "Reference ID for the verification."
        },
        "utr": {
          "type": "string",
          "description": "Unique Transaction Reference (UTR) number."
        }
      },
      "required": true
    },
    {
      "field": "vendorResponse",
      "type": "array",
      "description": "Response details from vendors.",
      "items": {
        "type": "object",
        "properties": {
          "statusCode": {
            "type": "integer",
            "description": "Vendor-specific status code."
          },
          "name": {
            "type": "string",
            "description": "Vendor name."
          },
          "sequence": {
            "type": "integer",
            "description": "Vendor sequence number."
          }
        }
      },
      "required": true
    }
  ],
  "example_request": {
    "input": {
      "bankAccountNumber": "50100045570197",
      "ifscNumber": "HDFC0000060",
      "name": "Pranil Vinod Palan",
      "address": "Mumbai",
      "consent": true
    }
  },
  "example_response": {
    "status": "success",
    "requestId": "407176b5-b7ed-4477-9d9e-6e420e0dfbe9",
    "type": "point",
    "serviceStatusCode": 200,
    "data": {
      "accountExists": true,
      "accountStatus": "VALID",
      "accountStatusCode": "",
      "fullName": "PRANIL VINOD PALAN",
      "bankName": "HDFC Bank",
      "branch": "FORT",
      "city": "GREATER BOMBAY",
      "state": "",
      "micr": "400240015",
      "refId": "",
      "utr": ""
    },
    "vendorResponse": [
      {
        "statusCode": 200,
        "name": "ScarletPanther",
        "sequence": 1
      }
    ]
  },
  "available_vendors": [
    "OnyxWolf",
    "SapphireSwan",
    "CobaltEagle",
    "SilverTiger",
    "AzureRaven",
    "ScarletPanther",
    "EmeraldWhale",
    "GoldenOtter",
    "CrimsonFalcon"
  ]
}
